// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "text.proto" (package "text", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Text } from "./text";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TextResponse } from "./text";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service text.Text
 */
export interface ITextClient {
    /**
     * Returns the “small” text payload
     *
     * @generated from protobuf rpc: GetSmall
     */
    getSmall(input: Empty, options?: RpcOptions): UnaryCall<Empty, TextResponse>;
    /**
     * Returns the “medium” text payload
     *
     * @generated from protobuf rpc: GetMedium
     */
    getMedium(input: Empty, options?: RpcOptions): UnaryCall<Empty, TextResponse>;
    /**
     * Returns the “large” text payload
     *
     * @generated from protobuf rpc: GetLarge
     */
    getLarge(input: Empty, options?: RpcOptions): UnaryCall<Empty, TextResponse>;
}
/**
 * @generated from protobuf service text.Text
 */
export class TextClient implements ITextClient, ServiceInfo {
    typeName = Text.typeName;
    methods = Text.methods;
    options = Text.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Returns the “small” text payload
     *
     * @generated from protobuf rpc: GetSmall
     */
    getSmall(input: Empty, options?: RpcOptions): UnaryCall<Empty, TextResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, TextResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the “medium” text payload
     *
     * @generated from protobuf rpc: GetMedium
     */
    getMedium(input: Empty, options?: RpcOptions): UnaryCall<Empty, TextResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, TextResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the “large” text payload
     *
     * @generated from protobuf rpc: GetLarge
     */
    getLarge(input: Empty, options?: RpcOptions): UnaryCall<Empty, TextResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, TextResponse>("unary", this._transport, method, opt, input);
    }
}
